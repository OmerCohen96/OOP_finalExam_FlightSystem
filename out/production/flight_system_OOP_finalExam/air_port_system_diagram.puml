@startuml

note top of AirPortSystem : Main class
AirPortSystem o-- Worker
WorkerServiceFacade <|.. Worker
FlightsNewsletterInterface <|.. FlightsNewsUpdater
SearchFactory -- SearchMethod
AirPortSystem *-- BookingManager
AirPortSystem *-- AirLineManager
BookingManager o-- Passenger
BookingManager *- FlightsNewsUpdater
FlightObserver <|.. Passenger
FlightObserver <|... Worker
Passenger o-- Ticket
Passenger *-- PassengersServiceFacade
PassengersServiceFacade <|.. BookingManager
SearchFactory -- SearchStrategy
SearchStrategy <|.. byPrice
SearchStrategy <|.. byDestination
SearchStrategy <|.. byDate
SearchFactory -- BookingManager
BookingManager *-- AirLineManager
AirLineManager o-- AirLine
AirLine <|-- GroupAirLine
AirLine --o GroupAirLine
AirLine <|-- SingularAirLine
AirLine o-- Flight
Flight *-- MyDate
Flight --o BookingManager

class Worker <<observer>>{
}

interface WorkerServiceFacade<<facade>>{
}

enum SearchMethod {
}

class FlightsNewsUpdater <<observable>>{
}

interface FlightsNewsletterInterface<<observable>> {
}

class AirPortSystem <<singleton>>{

}

class Ticket {
'flight
'ticket
}

interface FlightObserver{
'    +update()
}

interface SearchStrategy<<Strategy>>{
'    +search (Flights): matchingFlights
}


class Passenger<<observer>>{
'    -name
'    -ID
'    -ServiceFacade
'    -tickets []
'    + purchaseTicket()
'    +searchFlight()
'    +getPushes()
'    +gettersToFields()
}

class SearchFactory <<Factory>> <<static class>>{
'    +{static}generate(): searchStrategy
}

class byPrice <<concStrategy>>
class byDestination <<concStrategy>>
class byDate <<concStrategy>>

interface PassengersServiceFacade<<Facade>>{
'    +{abstract}purchaseTicket()
'    +{abstract}searchFlight()
'    +{abstract}subscribePushes()
'    +{abstract}unsubscribePushes()
}

class BookingManager <<Singleton>> <<Observable>>{
'    -AirLineManager
'    -map flightsBook
'    -flightsNewsLetter
'    +addNewFlight()
'    +searchFlight()
'    +purchaseTicket()
}

class AirLineManager <<Singelton>>{
'    -airLineGroups [ ]
'    +{static}Static getInstance()
'    +addAirLineGroup()
'    +getAirLineGroups()
'    +findAirLineGroup()
'    +removeAirLineGroup()
'    +getAirLineComponent()
'    +findAirLineComponent()
}

abstract AirLine <<Component>>{
'    -companyName
'    -flights [ ]
'
'    #getInternalFlights()
'    +getCompanyName()
'    +removeFlight()
'    +addFlight()
'    + {abstract} getAllFlights()
'    + {abstract}  getAllcompanies()
}

class GroupAirLine <<Composite>> {
'    -subsidiaryAirLines [ ]
'    +addSubsidiary()
'    +removeSubsidiary()
}

class SingularAirLine <<Leaf>>

class Flight{
'    -{static}SERIAL_NUMBER
'    -flight_code
'    -origin
'    -destination
'    -airLineName
'    -departureTime
'    -arrivalTime
'    -double price
'    --
'    simple Getters&Setters
}

class MyDate<<delegation>>{
'    - LocalDateTime
'    +{static}MyDate of(String)
'    +{static}boolean isValid(String)
'    +equals()
'    +equalsByDate()
'    +isAfter()
'    +isBefore()
}


@enduml